## -----------------------------------------------------------------------------
## Dev3000 monorepo docker-compose (実運用版)
##
## 用途:
##   - このリポの Make ターゲット（例: `make dev-up`）から利用される compose 定義です。
##   - ソースは `./frontend/...` を前提にしたバインド構成になっています。
##
## 参照（テンプレート版）:
##   - example/nextjs16/reference/docker-compose.yml
##     → 外部プロジェクトでの導入時にコピーして調整するためのリファレンス。
##     → バインドパスは `./app`, `./public` など、より一般的な構成になっています。
##
## 同期ポリシー:
##   - 本ファイルを更新した場合、reference 側にも意図の差分をコメントで反映してください。
##   - 逆も同様に、reference を改善したら本ファイルにも取り込みます。
##
## 同梱ポリシー (Bundling Policy):
##   - 本 compose は npm 配布物には同梱しません（package.json の files を参照）。
##   - このリポの開発・デモ用途に限定されます。
## -----------------------------------------------------------------------------
services:
  dev3000:
    build:
      context: frontend
      dockerfile: Dockerfile.dev
      # Build arguments for optimization
      args:
        BUILDKIT_INLINE_CACHE: 1
      # Use BuildKit for parallel builds and better caching
      cache_from:
        - type=registry,ref=dev3000:latest
      target: development
    container_name: dev3000

    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false  # We need write access for node_modules and .next

    # Port mappings
    ports:
      - "3000:3000"   # Next.js / App server
      - "3684:3684"   # Dev3000 MCP server

    # Volume mounts - removed to avoid WSL2 permission issues
    # Application files are copied into image during build
    #
    # Hot reload: enable bind mount for source, but keep node_modules/.next as container volumes
    volumes:
      # Bind-mount only source dirs needed for HMR to avoid WSL2 permission issues on root
      - ./frontend/app:/app/frontend/app:delegated
      - ./frontend/public:/app/frontend/public:delegated
      # Keep build artifacts and deps inside container
      - /app/frontend/node_modules
      - /app/frontend/.next

    # Environment variables
    environment:
      # ========== CDP (Chrome DevTools Protocol) Configuration ==========
      # Enable CDP monitoring for dev3000
      - DEV3000_CDP=1

      # CDP URL: Chrome running on host machine
      # Default: http://host.docker.internal:9222 (works on Docker Desktop)
      # For WSL2: Use host.docker.internal to access Windows host
      - DEV3000_CDP_URL=${DEV3000_CDP_URL:-http://host.docker.internal:9222}

      # CDP Proxy: Use socat to forward localhost:9222 -> host.docker.internal:9222
      # This allows dev3000 to connect via localhost, bypassing Chrome's Host header check
      # Options: "socat" (recommended), "direct" (no proxy), or leave empty (auto)
      - DEV3000_CDP_PROXY=${DEV3000_CDP_PROXY:-socat}

      # CDP Proxy configuration (optional, defaults shown)
      # - DEV3000_CDP_PROXY_LISTEN_PORT=9222              # Port inside container
      # - DEV3000_CDP_PROXY_TARGET_HOST=host.docker.internal  # Host to forward to
      # - DEV3000_CDP_PROXY_TARGET_PORT=9222              # Port on host

      # Node.js environment
      - NODE_ENV=development

      # File watching for hot reload (required for Docker/WSL)
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      # Reduce polling frequency to lower overhead in dev and speed up HMR/first render
      - WATCHPACK_POLLING_INTERVAL=1000
      - CHOKIDAR_INTERVAL=500

      # Next.js configuration
      - NEXT_TELEMETRY_DISABLED=1

      # Dev3000 logging configuration
      - LOG_FILE_PATH=/tmp/d3k.log

    # WSL2 compatibility: Map host.docker.internal to Windows host IP
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # Use docker-entrypoint.sh which handles:
    # - Dependency installation
    # - socat CDP proxy setup
    # - Environment variable configuration
    # - dev3000 startup
    command: ["--port", "3000"]

    # Restart policy
    restart: unless-stopped

    # Resource limits - optimized for development performance
    deploy:
      resources:
        limits:
          cpus: '4.0'      # Increased for faster builds
          memory: 6G       # Increased for Next.js Turbopack
        reservations:
          cpus: '1.0'      # Guaranteed CPU
          memory: 1G       # Guaranteed memory

# Networks (using default bridge network)
networks:
  default:
    driver: bridge
