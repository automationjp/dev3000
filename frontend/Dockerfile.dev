# Dev3000 Development Dockerfile
# This Dockerfile is designed to work with the frontend directory structure
# and provides a development environment with hot reload support

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    lsof \
    curl \
    coreutils \
    git \
    && rm -rf /var/cache/apk/*

# Ensure GNU coreutils binaries are prioritized
ENV PATH="/usr/bin:$PATH"

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.15.2 --activate

# Build stage for dev3000
FROM base AS dev3000-builder
WORKDIR /build

# Copy dev3000 source from parent directory
COPY ../ ./dev3000/

# Build dev3000
WORKDIR /build/dev3000
RUN pnpm install --frozen-lockfile --prefer-offline && \
    pnpm run build && \
    cd mcp-server && pnpm run build && cd .. && \
    mkdir -p /build/dev3000/mcp-server/public/screenshots && \
    chmod -R 777 /build/dev3000/mcp-server/public && \
    pnpm pack && \
    npm install -g ./dev3000-*.tgz && \
    rm ./dev3000-*.tgz

# Development stage
FROM base AS development
WORKDIR /app

# Copy dev3000 from builder
COPY --from=dev3000-builder /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=dev3000-builder /usr/local/bin /usr/local/bin

# Fix permissions for screenshots
RUN mkdir -p /usr/local/lib/node_modules/dev3000/mcp-server/public/screenshots && \
    chmod -R 777 /usr/local/lib/node_modules/dev3000/mcp-server/public

# Copy package.json first for better caching
COPY package.json* ./
COPY pnpm-lock.yaml* ./
COPY yarn.lock* ./
COPY package-lock.json* ./

# Create node user and set permissions
RUN chown -R node:node /app

# Switch to node user
USER node

# Install dependencies
RUN if [ -f pnpm-lock.yaml ]; then \
        pnpm install --prefer-offline; \
    elif [ -f yarn.lock ]; then \
        yarn install --prefer-offline; \
    elif [ -f package-lock.json ]; then \
        npm ci --prefer-offline; \
    else \
        npm install --prefer-offline --no-audit --legacy-peer-deps; \
    fi

# Set PATH
ENV PATH="/usr/local/lib/node_modules/.bin:${PATH}"

# Copy application files
COPY --chown=node:node . .

# Expose ports
EXPOSE 3000 3684

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ && \
      wget --no-verbose --tries=1 --spider http://localhost:3684/health || exit 1

# Environment variables
ENV NODE_ENV=development \
    CHOKIDAR_USEPOLLING=true \
    WATCHPACK_POLLING=true \
    DEV3000_CDP_SKIP_LAUNCH=1

# Default command
CMD ["sh", "-c", "dev3000 --port 3000 --debug"]
