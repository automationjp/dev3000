services:
  dev3000:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: dev3000

    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false  # We need write access for node_modules and .next

    # Port mappings
    ports:
      - "3000:3000"   # Next.js / App server
      - "3684:3684"   # Dev3000 MCP server

    # Volume mounts - removed to avoid WSL2 permission issues
    # Application files are copied into image during build

    # Environment variables
    environment:
      # CDP configuration for external Chrome
      - DEV3000_CDP_SKIP_LAUNCH=1
      - DEV3000_CDP_URL=${DEV3000_CDP_URL:-}

      # Node.js environment
      - NODE_ENV=development

      # File watching for hot reload (required for Docker/WSL)
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

      # Next.js configuration
      - NEXT_TELEMETRY_DISABLED=1

      # Dev3000 logging configuration
      - LOG_FILE_PATH=/tmp/d3k.log

    # WSL compatibility: allow host.docker.internal to work on Linux/WSL
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # Command to run - simplified since dependencies are pre-installed in image
    command: >
      sh -c "
        echo '━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'
        echo '🚀 Starting dev3000...'
        echo '━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'
        echo 'Node: '$(node --version)
        echo 'User: '$(whoami)
        echo 'Working directory: '$(pwd)
        echo ''
        dev3000 --port 3000 --debug
      "

    # Restart policy
    restart: unless-stopped

    # Resource limits (optional but recommended)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M

# Networks (using default bridge network)
networks:
  default:
    driver: bridge
