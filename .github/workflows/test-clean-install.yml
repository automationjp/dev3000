name: Test Clean Installation

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-clean-installs:
    strategy:
      matrix:
        os: [macos-latest]
        node: [20]
        package-manager: [pnpm, npm, yarn]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      # Install pnpm
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      
      # Install dependencies and build
      - run: pnpm install
      - run: pnpm run build
      - run: cd mcp-server && pnpm run build
      - run: pnpm pack
      
      # Test 1: Clean global install
      - name: Test Clean Global Install
        run: |
          # Save current directory
          WORK_DIR=$(pwd)
          
          # Create clean environment
          export CLEAN_HOME=$(mktemp -d)
          # Unset existing PNPM_HOME to avoid conflicts
          unset PNPM_HOME
          # Keep Node.js in PATH while removing pnpm
          export NODE_PATH=$(dirname $(which node))
          export PATH="$NODE_PATH:/usr/local/bin:/usr/bin:/bin"
          
          # Get full path to tarball
          TARBALL=$(ls $WORK_DIR/dev3000-*.tgz)
          echo "Installing from tarball: $TARBALL"
          
          # Install package manager in clean location
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            curl -fsSL https://get.pnpm.io/install.sh | PNPM_HOME=$CLEAN_HOME/.pnpm sh -
            export PNPM_HOME="$CLEAN_HOME/.pnpm"
            export PATH="$CLEAN_HOME/.pnpm:$PATH"
            echo "pnpm version: $($CLEAN_HOME/.pnpm/pnpm --version)"
            $CLEAN_HOME/.pnpm/pnpm install -g "$TARBALL"
            echo "Checking installation..."
            ls -la $CLEAN_HOME/.pnpm/global/5/node_modules/.bin/ || true
            $CLEAN_HOME/.pnpm/pnpm exec d3k --version
          elif [ "${{ matrix.package-manager }}" = "npm" ]; then
            npm config set prefix $CLEAN_HOME/.npm
            export PATH="$CLEAN_HOME/.npm/bin:$PATH"
            npm install -g "$TARBALL"
            echo "Checking installation..."
            ls -la $CLEAN_HOME/.npm/bin/ || true
            d3k --version
          else
            npm install -g yarn
            yarn config set prefix $CLEAN_HOME/.yarn
            export PATH="$CLEAN_HOME/.yarn/bin:$PATH" 
            echo "yarn version: $(yarn --version)"
            yarn global add "$TARBALL"
            echo "Checking installation..."
            ls -la $CLEAN_HOME/.yarn/bin/ || true
            d3k --version
          fi
      
      # Test 2: Server startup test
      - name: Test MCP Server Startup
        run: |
          # Create minimal test app
          TEST_DIR=$(mktemp -d)
          cd $TEST_DIR
          echo '{"name":"test","scripts":{"dev":"node -e \"console.log(\'Server running\'); setInterval(()=>{},1000)\""}}' > package.json
          
          # Run d3k with timeout and capture output
          timeout 30s d3k --debug --servers-only > d3k.log 2>&1 || CODE=$?
          
          # Show output for debugging
          echo "=== d3k output ==="
          cat d3k.log || true
          echo "=== end output ==="
          
          # Check if it started (exit code 124 means timeout, which is expected)
          if [ "$CODE" = "124" ]; then
            echo "✅ Server started successfully"
          else
            echo "❌ Server failed to start with exit code: $CODE"
            exit 1
          fi

  # Docker tests disabled - macOS runners don't have Docker
  # test-docker-install:
  #   runs-on: ubuntu-latest  # Would need Ubuntu for Docker
  #   ... (test commented out)